{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Remotely is a simple and secure remote code execution api.","name":"Remotely","body":"Remotely\r\n========\r\nRemotely is a simple and secure remote code execution api that supports both \r\nasynchronous and blocking execution. \r\n\r\nRemotely can be used for:\r\n\r\n- distributing tasks to other boxes in parallel\r\n- running coding under other versions of python\r\n- accessing libraries not available on the current box\r\n  such as using win32com from linux\r\n- accessing resources (files etc) on another box\r\n\r\n\r\nYou start the remotely server on the box where you want to execute code.\r\n\r\n::\r\n\r\n    from remotely import create_remotely_server\r\n    server = create_remotely_server(\"YOUR_API_KEY\", PORT)\r\n    server.serve_forever()\r\n    ...\r\n\r\nAnd you use the remotely decorater for any function you want to run remotely.\r\n\r\n::\r\n\r\n    from remotely import remotely\r\n\r\n    @remotely(\"YOUR_API_KEY\", SERVER, PORT)\r\n    def remote_code():\r\n        # import required packages\r\n        # do something here\r\n        return result\r\n\r\n    # function will be executed on the remote server\r\n    remote_code()\r\n\r\nThe asynchronous (non-blocking) version runs the function as a separate process \r\non the remote server and supports simple job management functions (join and kill).\r\n\r\n::\r\n\r\n    from remotely import RemoteClient\r\n    rc = RemoteClient(\"API_KEY\", SERVER, PORT)\r\n    pid = rc.run(foo, arg1, arg2=key2)\r\n    output = rc.join(pid)\r\n    output = rc.kill(pid)\r\n\r\n","google":"UA-36306382-1"}